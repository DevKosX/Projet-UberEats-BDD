#Projet Simulation UberEats : Comparaison Redis vs. MongoDB

Ce projet vise √† simuler la logique de gestion des courses (dispatch) d'une plateforme de livraison (type UberEats) en utilisant deux architectures de bases de donn√©es distribu√©es diff√©rentes : **Redis (Pub/Sub)** et **MongoDB (Change Streams)**.

---

## 1. Architecture du Projet

Le c≈ìur du projet repose sur le concept de **Producteur/Consommateur** et de **Comp√©tition en temps r√©el** entre les Livreurs.

### 1.1 Composants Communs

| Composant | R√¥le | Description |
| :--- | :--- | :--- |
| **Manager** | **Producteur** | Simule la plateforme. Publie l'annonce d'une nouvelle course et s√©lectionne le Livreur le plus rapide. |
| **Livreur** | **Consommateur/Comp√©titeur** | Simule l'application du Livreur. Re√ßoit l'annonce, manifeste son int√©r√™t, et accepte la course s'il est s√©lectionn√©. |
| **`denormalisation.json`** | **Source de Donn√©es** | Fichier unique contenant les donn√©es de commandes (restaurants, clients, etc.) utilis√©es pour simuler les annonces. |

---

### 1.2 Architecture Redis (Messagerie √âv√©nementielle)

Cette architecture utilise **Redis** comme un courtier de messages et un magasin de donn√©es temporaire.

* **Communication :** Utilisation du mod√®le **Pub/Sub** pour la diffusion instantan√©e des annonces aux Livreurs.
* **S√©lection :** Le Manager attend pendant un temps d√©fini (5 secondes) que les Livreurs enregistrent leur int√©r√™t via la commande `HSET`. La s√©lection est bas√©e sur le **timestamp le plus pr√©coce**.
* **√âtat :** Stockage de l'√©tat temporaire (`ubereats:course:active`) et des int√©r√™ts (`ubereats:interet:Oxxxx`) via des commandes Redis classiques.

---

### 1.3 Architecture MongoDB (Flux de Changement Persistant)

Cette architecture utilise **MongoDB** (lanc√© en Replica Set) comme base de donn√©es principale et exploite ses **Change Streams** pour la communication en temps r√©el.

* **Communication :** Le Manager ins√®re un document. Les Livreurs surveillent la collection (`annonces`) via un **Change Stream** et re√ßoivent l'√©v√©nement d'insertion en temps r√©el.
* **S√©lection :** La s√©lection est g√©r√©e par une **mise √† jour atomique conditionnelle** (`$set` avec une condition sur le statut). Le premier Livreur √† r√©ussir √† changer le statut du document de `ANNONCE_PUBLIEE` √† `LIVREUR_SELECTIONNE` gagne.
* **√âtat :** L'√©tat de la course est persistant et contenu int√©gralement dans un **unique document JSON** dans la collection `annonces`.

---

## 2. Pr√©requis Techniques

Pour ex√©cuter ce projet, vous devez disposer des √©l√©ments suivants :

* **Python 3.x** (avec des environnements virtuels `myredis` et `mymongo`)
* **Redis Server** (version 5.0 ou sup√©rieure recommand√©e)
* **MongoDB Server** (version 4.0 ou sup√©rieure, **doit √™tre lanc√© en Replica Set**).
* **Librairies Python :** `redis`, `pymongo`, `dnspython` (√† installer dans les environnements virtuels respectifs).

---

## 3. Structure des Dossiers

Voici le contenu int√©gral de votre fichier README.md, incluant l'architecture, les pr√©requis, la structure des dossiers, et les instructions de lancement d√©taill√©es, le tout format√© en Markdown.
Markdown

# üõµ Projet Simulation UberEats : Comparaison Redis vs. MongoDB

Ce projet vise √† simuler la logique de gestion des courses (dispatch) d'une plateforme de livraison (type UberEats) en utilisant deux architectures de bases de donn√©es distribu√©es diff√©rentes : **Redis (Pub/Sub)** et **MongoDB (Change Streams)**.

---

## 1. Architecture du Projet

Le c≈ìur du projet repose sur le concept de **Producteur/Consommateur** et de **Comp√©tition en temps r√©el** entre les Livreurs.

### 1.1 Composants Communs

| Composant | R√¥le | Description |
| :--- | :--- | :--- |
| **Manager** | **Producteur** | Simule la plateforme. Publie l'annonce d'une nouvelle course et s√©lectionne le Livreur le plus rapide. |
| **Livreur** | **Consommateur/Comp√©titeur** | Simule l'application du Livreur. Re√ßoit l'annonce, manifeste son int√©r√™t, et accepte la course s'il est s√©lectionn√©. |
| **`denormalisation.json`** | **Source de Donn√©es** | Fichier unique contenant les donn√©es de commandes (restaurants, clients, etc.) utilis√©es pour simuler les annonces. |

---

### 1.2 Architecture Redis (Messagerie √âv√©nementielle)

Cette architecture utilise **Redis** comme un courtier de messages et un magasin de donn√©es temporaire.

* **Communication :** Utilisation du mod√®le **Pub/Sub** pour la diffusion instantan√©e des annonces aux Livreurs.
* **S√©lection :** Le Manager attend pendant un temps d√©fini (5 secondes) que les Livreurs enregistrent leur int√©r√™t via la commande `HSET`. La s√©lection est bas√©e sur le **timestamp le plus pr√©coce**.
* **√âtat :** Stockage de l'√©tat temporaire (`ubereats:course:active`) et des int√©r√™ts (`ubereats:interet:Oxxxx`) via des commandes Redis classiques.

---

### 1.3 Architecture MongoDB (Flux de Changement Persistant)

Cette architecture utilise **MongoDB** (lanc√© en Replica Set) comme base de donn√©es principale et exploite ses **Change Streams** pour la communication en temps r√©el.

* **Communication :** Le Manager ins√®re un document. Les Livreurs surveillent la collection (`annonces`) via un **Change Stream** et re√ßoivent l'√©v√©nement d'insertion en temps r√©el.
* **S√©lection :** La s√©lection est g√©r√©e par une **mise √† jour atomique conditionnelle** (`$set` avec une condition sur le statut). Le premier Livreur √† r√©ussir √† changer le statut du document de `ANNONCE_PUBLIEE` √† `LIVREUR_SELECTIONNE` gagne.
* **√âtat :** L'√©tat de la course est persistant et contenu int√©gralement dans un **unique document JSON** dans la collection `annonces`.

---

## 2. Pr√©requis Techniques

Pour ex√©cuter ce projet, vous devez disposer des √©l√©ments suivants :

* **Python 3.x** (avec des environnements virtuels `myredis` et `mymongo`)
* **Redis Server** (version 5.0 ou sup√©rieure recommand√©e)
* **MongoDB Server** (version 4.0 ou sup√©rieure, **doit √™tre lanc√© en Replica Set**).
* **Librairies Python :** `redis`, `pymongo`, `dnspython` (√† installer dans les environnements virtuels respectifs).

---

## 3. Structure des Dossiers

projet_uber
‚îú‚îÄ‚îÄ avec-mongo/
‚îÇ   ‚îú‚îÄ‚îÄ denormalisation.json     # Donn√©es sources
‚îÇ   ‚îú‚îÄ‚îÄ manager_mongo.py         # Manager utilisant MongoDB
‚îÇ   ‚îî‚îÄ‚îÄ livreur_mongo.py         # Livreur utilisant MongoDB
‚îú‚îÄ‚îÄ avec-redis/
‚îÇ   ‚îú‚îÄ‚îÄ denormalisation.json     # Donn√©es sources
‚îÇ   ‚îú‚îÄ‚îÄ manager_ubereats.py      # Manager utilisant Redis
‚îÇ   ‚îî‚îÄ‚îÄ livreur_ubereats.py      # Livreur utilisant Redis
‚îî‚îÄ‚îÄ denormalisation.py           # Script initial de pr√©paration des donn√©es


MONGODB : 

###  PREMIER TERMINAL : 

```bash
mongod --port 27017 --dbpath /home/narz/BUT3/Base_De_Donnees/projet/projet-uber/avec-mongo/data/db --replSet rs0

### DEUXIEME TERMINAL : 
```bash
cd BUT3/Base_De_Donnees/projet/projet-uber/avec-mongo
source mymongo/bin/activate
python livreur_mongo.py

### TROISIEME TERMINAL : 
```bash 
cd BUT3/Base_De_Donnees/projet/projet-uber/avec-mongo
source mymongo/bin/activate
python manager_mongo.py

###  TERMINAL : 
```bash
mongosh
use uber_mongo
db.annonces.find().pretty()


### REDIS :

### SERVEUR TERMINAL : 

```bash
cd redis/redis-stable/src
./redis-server

### CLIENT TERMINAL : 

```bash
cd ~/redis/redis-stable/src
./redis-cli

--- Apres ---

```bash 
GET ubereats:course:active

### PREMIER TERMINAL :

```bash
cd BUT3/Base_De_Donnees/projet/projet-uber/avec-redis
source myredis/bin/activate 
python livreur_redis.py

### DEUXIEME TERMINAL : 

```bash
cd BUT3/Base_De_Donnees/projet/projet-uber/avec-redis
source myredis/bin/activate 
python manager_redis.py



